import binascii
import ecdsa
import hashlib

private_key = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)
print(binascii.hexlify(private_key.to_string()).decode('ascii').upper())
pstr=binascii.hexlify(private_key.to_string()).decode('ascii')
print(type(pstr))
public_key = private_key.get_verifying_key()
print(binascii.hexlify(public_key.to_string()).decode('ascii').upper())

print(private_key)
print(public_key)


def base58encode(n):
    b58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    result = ''
    while n > 0:
        result = b58[n % 58] + result
        n /= 58
    return result

# Will be used to decode raw bytes and then encode them to the base58
def base256decode(s):
    result = 0
    for c in s:
        result = result * 256 + ord(c)
    return result

def countLeadingZeroes(s):
    count = 0
    for c in s:
        if c == '\0':
            count += 1
        else:
            break
    return count

def base58CheckEncode(prefix, payload):
    s = chr(prefix) + payload
    checksum = hashlib.sha256(hashlib.sha256(s).digest()).digest()[0:4]
    result = s + checksum
    return '1' * countLeadingZeroes(result) + base58encode(base256decode(result))
def privateKeyToWif(key_hex):
    return base58CheckEncode(0x80, key_hex.decode('hex'))


#private_key = '0a56184c7a383d8bcce0c78e6e7a4b4b161b2f80a126caa48bde823a4625521f'

def privateKeyToPublicKey():
    #sk = ecdsa.SigningKey.from_string(s, curve=ecdsa.SECP256k1)
    #vk = sk.verifying_key
    private_key = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)

    pstr = binascii.hexlify(private_key.to_string()).decode('ascii')
    print(type(pstr))
    public_key = private_key.get_verifying_key()
    print(binascii.hexlify(public_key.to_string()).decode('ascii').upper())
    pk=binascii.hexlify(private_key.to_string()).decode('ascii')

    return ('\04' + pk).encode('ascii')

uncompressed_public_key = privateKeyToPublicKey()
print(uncompressed_public_key)
def pubKeyToAddr(s):
    ripemd160 = hashlib.new('ripemd160')
    ripemd160.update(hashlib.sha256(s.decode('hex')).digest())
    return base58CheckEncode(0, ripemd160.digest())

def keyToAddr(s):
    return pubKeyToAddr(privateKeyToPublicKey(s))
